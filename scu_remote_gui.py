# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import os
import sys
import glob
import uuid
import json
import yaml
import socket
import base64
import requests
import datetime
from tkinter import *
from pathlib import Path
from urllib import request
import tkinter.messagebox as tkmb
from ftplib import FTP, error_perm
from assets import ico, button_1_64, entry_1_64, entry_2_64, entry_3_64
# from tkinter import Tk, Canvas, Entry, Button, PhotoImage

if os.path.exists("scu_update.exe"):
    os.remove("scu_update.exe")

workDir = os.getcwd() + "\\logs"
if not os.path.exists("logs"):
    os.mkdir(workDir)
# 错误处理
class Mylogpetion():
    def __init__(self):
        import traceback
        import logging
# logging的基本配置
        errorTime = datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')  # 获取错误时间
        logging.basicConfig(
            filename=f'{workDir}\\scu_debug_{errorTime}.txt',              # 当前文件写入位置
            format='%(asctime)s %(levelname)s \n %(message)s',             # 格式化存储的日志格式
            level=logging.DEBUG,
            datefmt='%Y-%m-%d %H:%M:%S'
        )
# 写入日志
        logging.debug(traceback.format_exc())

ConfigFile = "config.local.win.yml"
with open(ConfigFile, encoding='utf-8') as f: # 读取主配置文件
    config = yaml.load(f, Loader=yaml.FullLoader) # 转为字典

url = config["url"]["sentencesUrl"] # 语录的获取url，需自行修改web服务器配置

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(os.getcwd())

def relative_to_assets(path: str) -> Path:
    ButtonImg = open("button_1.png","wb+")
    ButtonImg.write(base64.b64decode(button_1_64))
    ButtonImg.close()
    Entry1Img = open("entry_1.png","wb+")
    Entry1Img.write(base64.b64decode(entry_1_64))
    Entry1Img.close()
    Entry2Img = open("entry_2.png","wb+")
    Entry2Img.write(base64.b64decode(entry_2_64))
    Entry2Img.close()
    Entry3Img = open("entry_3.png","wb+")
    Entry3Img.write(base64.b64decode(entry_3_64))
    Entry3Img.close()
    return ASSETS_PATH / Path(path)

def files(curr_dir = '.', ext = '*.json'):
    for i in glob.glob(os.path.join(curr_dir, ext)):
        yield i

def RemoveFiles(dir, ext):
    for i in files(dir, ext):
        os.remove(i)

def UploadSuccessful():
    tkmb.showinfo(title="上传成功", message="上传完成，如上传出现问题请查看log或与我们联系 | 上传语录：" + JsonName + "语录")

def UploadSentence():
    global JsonName
    global SentencesFile 
    JsonUrl = "" # 留空
    SentencesFile = "" # 留空
    JsonName = entry_1.get()
    if JsonName == "桑吉":
        JsonUrl = url + "a.json" # 语录的获取url
        request.urlretrieve(JsonUrl,"a_local.json") # 下载语录到根目录
        SentencesFile = "a.json" # 更新后的语录文件名，建议与服务器上的文件名字保持一致
    elif JsonName == "羽月":
        JsonUrl = url + "b.json"
        request.urlretrieve(JsonUrl,"b_local.json")
        SentencesFile = "b.json"
    elif JsonName == "楠桐":
        JsonUrl = url + "c.json"
        request.urlretrieve(JsonUrl,"c_local.json")
        author = entry_2.get() # 获取作者
        SentencesFile = "c.json"
    else:
        SentenceNameError()

    sentence = entry_3.get()
    item_dict = "" # 留空
    OpenJsonFile = "" # 留空
    if JsonName == "桑吉":
        if sentence == "":
            SentenceTextError()
        else:
            UploadCheck = tkmb.askyesno(
            "Continue?",
            f"是否确认将'{sentence}'上传至{JsonName}语录？\n"
            "如上传了错误的数据请及时与我们联系！")
        if not UploadCheck:
            return
        OpenJsonFile = "a_local.json" # 与上方request的文件名一致
    if JsonName == "羽月":
        if sentence == "":
            SentenceTextError()
        else:
            UploadCheck = tkmb.askyesno(
            "Continue?",
            f"是否确认将'{sentence}'上传至{JsonName}语录？\n"
            "如上传了错误的数据请及时与我们联系！")
        if not UploadCheck:
            return
        OpenJsonFile = "b_local.json"
    if JsonName == "楠桐":
        if sentence == "":
            SentenceTextError()
        if author == "":
            SentenceAuthorError()
        UploadCheck = tkmb.askyesno(
            "Continue?",
            f"是否确认将{author}说的'{sentence}'上传至{JsonName}语录？\n"
            "如上传了错误的数据请及时与我们联系！")
        if not UploadCheck:
            return
        OpenJsonFile = "c_local.json"
    f = open(OpenJsonFile, 'r', encoding="utf-8") # 将语言文件写入缓存
    text = f.read() # 读取语言
    f.close() # 关闭语言文件
    content = json.loads(text) # 转为List，List中为字典
    id = len(content) + 1 # 获取字典位数并加1的方式自动更新id
    Uuid = str(uuid.uuid4()) # 基于随机数生成uuid，可能会有极小的概率重复
    if JsonName == "桑吉":
        item_dict = {
    "id": f"{id}", # 新的id，通过此方式写入双引号
    "uuid": f"{Uuid}", # 新的uuid，通过此方式写入双引号
    "hitokoto": f"{sentence}", # 需要添加的语录将填入这里，通过此方式写入双引号
    "type": "a",
    "from": "资本家聚集地",
    "from_who": "桑吉Sage",
    "creator": "桑吉Sage",
    "creator_uid": "1",
    "reviewer": "1",
    "commit_from": "web",
    "created_at": "1626590063",
    "length": "19"
} # 需添加的对象
    elif JsonName == "羽月":
        item_dict = {
    "id": f"{id}",
    "uuid": f"{Uuid}",
    "hitokoto": f"{sentence}",
    "type": "b",
    "from": "羽月ちい",
    "from_who": "羽月ちい",
    "creator": "羽月ちい",
    "creator_uid": "1",
    "reviewer": "1",
    "commit_from": "web",
    "created_at": "1626590063",
    "length": "19"
}
    elif JsonName == "楠桐":
        item_dict = {
    "id": f"{id}",
    "uuid": f"{Uuid}",
    "hitokoto": f"{sentence}",
    "type": "c",
    "from": f"{author}", # 填入作者，通过此方式写入双引号
    "from_who": f"{author}",
    "creator": f"{author}",
    "creator_uid": "1",
    "reviewer": "1",
    "commit_from": "web",
    "created_at": "1626590063",
    "length": "19"
}
    content.append(item_dict) # 将字典追加入列表

    with open(SentencesFile, 'w', encoding="utf-8") as JsonFile:
        json.dump(content, JsonFile, indent=4, ensure_ascii=False) # 打开并写入json中，保持4格缩进并避免中文乱码

    host = config["host"]
    port = config["port"]
    username = config["Account"]["user"]
    password = config["Account"]["passwd"]

    ftp = FtpConnect(host, port, username, password)
    # 避免提示 ftplib.error_perm: 550 SIZE not allowed in ASCII
    ftp.voidcmd('TYPE I')
    UploadFile(ftp, SentencesFile) # 上传文件
    ftp.close()
    RemoveFiles('.', '*.json')
    UploadSuccessful()

def UpdateInfo():
    tkmb.showinfo(title="版本更新", message="检测到新版本！即将开始更新！")

def TestInfo():
    tkmb.showwarning(title="Nya-WSL | NWC", message="该程序目前尚不完善，如有任何问题请与我们联系！")

def SentenceNameError():
    tkmb.showwarning(title="语录名称错误", message="该语录不存在，请检查！")

def SentenceTextError():
    tkmb.showwarning(title="语录错误", message="上传内容为空，请检查！")

def SentenceAuthorError():
    tkmb.showwarning(title="错误", message="作者为空，请检查！")

def FtpConnect(host, port, username, password):
    ftp = FTP()
    ftp.set_debuglevel(2) # 打开调试级别2，显示详细信息
    ftp.encoding = 'utf-8' # 解决中文编码问题，默认是latin-1
    try:
        ftp.connect(host, port)
        ftp.login(username, password)
        print(ftp.getwelcome()) # 打印欢迎信息
    except(socket.error, socket.gaierror): # 连接错误
        ConnectError = print("ERROR: cannot connect [{}:{}]" .format(host, port))
        ConnectError = f"ERROR: cannot connect [{host}:{port}]"
        sys.exit(ConnectError)
    except error_perm: # 认证错误
        print("ERROR: user Authentication failed ")
        AuthError = "ERROR: user Authentication failed "
        sys.exit(AuthError)
    return ftp

def UploadFile(ftp, localpath):
    """
    上传文件
    :param ftp:
    :param SentencesFile:
    :param localpath:
    :return:
    """
    bufsize = 1024 # 缓冲区大小
    fp = open(localpath, 'rb')
    ftp.storbinary('STOR ' + SentencesFile, fp, bufsize)  # 上传文件
    fp.close()

try:
    version = config["version"]
    LatestVersion = requests.get("https://qn.nya-wsl.cn/scu/version.html").text

    if version != LatestVersion:
        UpdateInfo()
        UpdateUrl = "https://qn.nya-wsl.cn/scu/scu_update.exe"
        print("检测到更新，正在更新中...")
        request.urlretrieve(UpdateUrl,"scu_update.exe")
        os.system("scu_update.exe")
        sys.exit("exit code: update") # 防止更新程序异常导致程序继续运行

    TestInfo()

    tmp = open("tmp.ico","wb+")
    tmp.write(base64.b64decode(ico))
    tmp.close()

    window = Tk()
    window.iconbitmap("tmp.ico")
    os.remove("tmp.ico")
    window.title(f"Nya-WSL | 语录上传系统{version}")
    window.geometry("400x300")
    window.configure(bg = "#FFE0E0")

    canvas = Canvas(
        window,
        bg = "#FFE0E0",
        height = 300,
        width = 400,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    canvas.create_text(
        176.0,
        41.0,
        anchor="nw",
        text="语录名称",
        fill="#FF8F8F",
        font=("Inter Regular", 12 * -1)
    )

    canvas.create_text(
        176.0,
        172.0,
        anchor="nw",
        text="语录内容",
        fill="#FF8F8F",
        font=("Inter Regular", 12 * -1)
    )

    canvas.create_text(
        176.0,
        107.0,
        anchor="nw",
        text="语录作者",
        fill="#FF8F8F",
        font=("Inter Regular", 12 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        200.0,
        71.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=186.0,
        y=61.0,
        width=28.0,
        height=18.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        200.0,
        136.0,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    entry_2.place(
        x=186.0,
        y=126.0,
        width=28.0,
        height=18.0
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=UploadSentence,
        relief="sunken"
    )
    button_1.place(
        x=164.0,
        y=238.0,
        width=72.0,
        height=20.0
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_3 = canvas.create_image(
        200.0,
        202.0,
        image=entry_image_3
    )
    entry_3 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    entry_3.place(
        x=135.0,
        y=192.0,
        width=130.0,
        height=18.0
    )
    window.resizable(False, False)
    RemoveFiles('.', '*.png')
    window.mainloop()
    

except:
    Mylogpetion()